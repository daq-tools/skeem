[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit",
]

[project]
name = "skeem"
description = "Infer SQL DDL statements from tabular data"
readme = "README.rst"
keywords = [
  "csv",
  "ddl",
  "excel",
  "frictionless",
  "gcs",
  "github",
  "grib",
  "gsheet",
  "http",
  "infer",
  "inference",
  "influxdb",
  "introspection",
  "json",
  "jsonl",
  "ldjson",
  "ndjson",
  "netcdf",
  "pandas",
  "parquet",
  "rdbms",
  "reflection",
  "s3",
  "schema",
  "schema conversion",
  "schema inference",
  "spreadsheet",
  "sql",
  "sql-schema",
  "tabular-data",
]
license = { text = "MIT" }
authors = [
  { name = "Andreas Motl", email = "andreas.motl@panodata.org" },
  { name = "Benjamin Gutzmann", email = "gutzemann@gmail.com" },
  { name = "Richard Pobering", email = "richard.pobering@panodata.org" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Financial and Insurance Industry",
  "Intended Audience :: Healthcare Industry",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Legal Industry",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "License :: OSI Approved :: MIT License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Communications",
  "Topic :: Database",
  "Topic :: Documentation",
  "Topic :: Education",
  "Topic :: Office/Business",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Software Development :: Interpreters",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Version Control",
  "Topic :: System :: Archiving",
  "Topic :: System :: Systems Administration",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]
dynamic = [
  "version",
]
dependencies = [
  "click<9",
  "colorama<1",
  "crash",
  "ddlgenerator<0.2",
  "frictionless[excel,json,ods,parquet,sql]>=5.16,<5.19",
  "fsspec[gcs,github,http,s3]==2024.10.0",
  "json-stream<3",
  "line-protocol-parser<2",
  "numpy<3",
  "odfpy<2",
  "pandas<2.3",
  "requests<2.33",
  "sql-formatter<0.7",
  "sqlalchemy-cratedb==0.40.0",
  "sqlmakeuper<0.2",
  "urllib3<3",
]
optional-dependencies.develop = [
  "hunter<4",
  "mypy<1.14",
  "poethepoet<0.30",
  "pyproject-fmt<2.5",
  "ruff<0.8",
  "types-requests<2.33",
  "validate-pyproject<0.23",
]
optional-dependencies.release = [
  "build<2",
  "twine<6",
]
optional-dependencies.scientific = [
  "cfgrib<1",
  "cftime<2",
  "scipy<2",
  "xarray<2025",
]
optional-dependencies.test = [
  "pytest<9",
  "pytest-cov<7",
  "pytest-timeout<3",
]
urls.changelog = "https://github.com/daq-tools/skeem/blob/main/CHANGES.rst"
urls.documentation = "https://github.com/daq-tools/skeem"
urls.homepage = "https://github.com/daq-tools/skeem"
urls.repository = "https://github.com/daq-tools/skeem"
scripts.skeem = "skeem.cli:cli"

[tool.setuptools.packages.find]
namespaces = false

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

lint.select = [
  # Builtins
  "A",
  # Bugbear
  "B",
  # comprehensions
  "C4",
  # Pycodestyle
  "E",
  # eradicate
  "ERA",
  # Pyflakes
  "F",
  # isort
  "I",
  # pandas-vet
  "PD",
  # return
  "RET",
  # Bandit
  "S",
  # print
  "T20",
  "W",
  # flake8-2020
  "YTT",
]

lint.extend-ignore = [
  # zip() without an explicit strict= parameter
  "B905",
  # df is a bad variable name. Be kinder to your future self.
  "PD901",
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
]

lint.per-file-ignores."skeem/core.py" = [ "E402" ]
lint.per-file-ignores."skeem/fastparquet/*" = [ "E722" ]
lint.per-file-ignores."skeem/pandas/*" = [ "S101" ]
lint.per-file-ignores."skeem/report.py" = [ "T201" ]
lint.per-file-ignores."skeem/util/platform.py" = [ "T201" ]
lint.per-file-ignores."skeem/util/report.py" = [ "T201" ]
lint.per-file-ignores."tests/*" = [ "S101" ]                # Use of `assert` detected
lint.per-file-ignores."tests/*roadrunner*" = [ "ERA001" ]   # Use of `assert` detected

[tool.pytest.ini_options]
addopts = "-ra -q --verbosity=3 --doctest-modules --cov --cov-report=term-missing --cov-report=xml"
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
testpaths = [
  "skeem",
  "tests",
]
xfail_strict = true
markers = [
  "roadrunner",
  "slow",
]

[tool.coverage.run]
branch = false
omit = [
  "skeem/ddlgen/ddlgenerator.py",
  "skeem/ddlgen/sources.py",
  "skeem/fastparquet/core.py",
  "skeem/pandas/io_common.py",
  "tests/*",
]
source = [ "skeem" ]

[tool.coverage.report]
fail_under = 0
show_missing = true

[tool.mypy]
packages = [ "skeem" ]
install_types = true
ignore_missing_imports = true
implicit_optional = true
non_interactive = true

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.0"

# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

check = [
  "lint",
  "test",
]

format = [
  { cmd = "ruff format" },
  # Configure Ruff not to auto-fix (remove!) unused variables (F841) and `print` statements (T201).
  { cmd = "ruff check --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 ." },
  { cmd = "pyproject-fmt --keep-full-version pyproject.toml" },
]

lint = [
  { cmd = "ruff format --check" },
  { cmd = "ruff check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload dist/*" },
]

test = { cmd = "pytest -m 'not roadrunner'" }
test-roadrunner = { cmd = "pytest -m 'roadrunner'" }
